{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Ask a question...'\nvar errorString = 'An error occurred! Please try again later.'\n\nexport const init = (data) => {\n\n    const blockId = data['blockId']\n    const api_type = data['api_type']\n    const persistConvo = data['persistConvo']\n    const usertokenvalidation = data['usertokenvalidation']\n\n    // Initialize local data storage if necessary\n    // If a thread ID exists for this block, make an API request to get existing messages\n    if (api_type === 'assistant') {\n        chatData = localStorage.getItem(\"block_openai_chat_data\")\n        if (chatData) {\n            chatData = JSON.parse(chatData)\n            if (chatData[blockId] && chatData[blockId]['threadId'] && persistConvo === \"1\") {\n                fetch(`${M.cfg.wwwroot}/mod/maici/api/thread.php`,{\n                    method: 'POST',\n                    body: JSON.stringify({\n                            blockId: blockId,\n                            threadId: chatData[blockId]['threadId']\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    for (let message of data) {\n                        addToChatLog(message.role === 'user' ? 'user' : 'bot', message.message)\n                    }\n                })\n                // Some sort of error in the API call. Probably the thread no longer exists, so lets reset it\n                .catch(error => {\n                    chatData[blockId] = {}\n                    localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n                })\n            // The block ID doesn't exist in the chat data object, so let's create it\n            } else {\n                chatData[blockId] = {}\n            }\n        // We don't even have a chat data object, so we'll create one\n        } else {\n            chatData = {[blockId]: {}}\n        }\n        localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n    }\n\n    document.querySelector('#openai_input').addEventListener('keyup', async (e) => {\n        if (e.which === 13 && e.target.value !== \"\" ) {\n            if(await checkUserTokenUsage(blockId, usertokenvalidation)){\n                addToChatLog('user', e.target.value)\n                createCompletion(e.target.value, blockId, api_type)\n                e.target.value = ''\n            }\n        }\n    })\n\n    document.querySelector('#go').addEventListener('click', async (e) => {\n        const input = document.querySelector('#openai_input')\n        if (input.value !== \"\") {\n            if(await checkUserTokenUsage(blockId, usertokenvalidation)){\n                addToChatLog('user', input.value)\n                createCompletion(input.value, blockId, api_type)\n                input.value = ''\n            }\n        }\n    })\n\n    document.querySelector('#refresh').addEventListener('click', e => {\n        clearHistory(blockId)\n    })\n\n    require(['core/str'], function(str) {\n        var strings = [\n            {\n                key: 'askaquestion',\n                component: 'mod_maici'\n            },\n            {\n                key: 'erroroccurred',\n                component: 'mod_maici'\n            },\n        ];\n        str.get_strings(strings).then((results) => {\n            questionString = results[0];\n            errorString = results[1];\n        });\n    });\n}\n\n/**\n * Add a message to the chat UI\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\n * @param {string} message The text of the message to add\n */\nconst addToChatLog = (type, message) => {\n    let messageContainer = document.querySelector('#openai_chat_log')\n    \n    const messageElem = document.createElement('div')\n    messageElem.classList.add('openai_message')\n    for (let className of type.split(' ')) {\n        messageElem.classList.add(className)\n    }\n\n    const messageText = document.createElement('span')\n    messageText.innerHTML = message\n    messageElem.append(messageText)\n\n    messageContainer.append(messageElem)\n    if (messageText.offsetWidth) {\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\n    }\n    messageContainer.scrollTop = messageContainer.scrollHeight\n}\n\n/**\n * Clears the thread ID from local storage and removes the messages from the UI in order to refresh the chat\n */\nconst clearHistory = (blockId) => {\n    chatData = localStorage.getItem(\"block_openai_chat_data\")\n    if (chatData) {\n        chatData = JSON.parse(chatData)\n        if (chatData[blockId]) {\n            chatData[blockId] = {}\n            localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n        }\n    }\n    document.querySelector('#openai_chat_log').innerHTML = \"\"\n}\n\n/**\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\n * @param {string} message The text to get a completion for\n * @param {int} blockId The ID of the block this message is being sent from -- used to override settings if necessary\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\n */\nconst createCompletion = (message, blockId, api_type) => {\n    let threadId = null\n    let chatData\n\n    // If the type is assistant, attempt to fetch a thread ID\n    if (api_type === 'assistant') {\n        chatData = localStorage.getItem(\"block_openai_chat_data\")\n        if (chatData) {\n            chatData = JSON.parse(chatData)\n            if (chatData[blockId]) {\n                threadId = chatData[blockId]['threadId'] || null\n            }\n        } else {\n            // create the chat data item if necessary\n            chatData = {[blockId]: {}}\n        }\n    }  \n\n    const history = buildTranscript()\n\n    document.querySelector('#control_bar').classList.add('disabled')\n    document.querySelector('#openai_input').classList.remove('error')\n    document.querySelector('#openai_input').placeholder = questionString\n    document.querySelector('#openai_input').blur()\n    addToChatLog('bot loading', '...');\n\n    fetch(`${M.cfg.wwwroot}/mod/maici/api/completion.php`, {\n        method: 'POST',\n        body: JSON.stringify({\n            message: message,\n            history: history,\n            blockId: blockId,\n            threadId: threadId\n        })\n    })\n    .then(response => {\n        let messageContainer = document.querySelector('#openai_chat_log')\n        messageContainer.removeChild(messageContainer.lastElementChild)\n        document.querySelector('#control_bar').classList.remove('disabled')\n\n        if (!response.ok) {\n            return response.json().then(error => {\n                // Prepare error message\n                let errorMessage = '';\n                Object.keys(error.error).forEach(attr => {\n                    errorMessage += `${attr}: ${error.error[attr]}\\n`;\n                });\n                // Add error message to chat log\n                addToChatLog('alert', errorMessage);\n                throw Error(error.error.message);\n            });\n        } else {\n            return response.json()\n        }\n    })\n    .then(data => {\n        try {\n            addToChatLog('bot', data.message)\n            if (data.thread_id) {\n                chatData[blockId]['threadId'] = data.thread_id\n                localStorage.setItem(\"block_openai_chat_data\", JSON.stringify(chatData));\n            }\n        } catch (error) {\n            console.log(error)\n            addToChatLog('bot', data.error.message)\n        }\n        document.querySelector('#openai_input').focus()\n    })\n    .catch(error => {\n        console.log(error)\n        document.querySelector('#openai_input').classList.add('error')\n        document.querySelector('#openai_input').placeholder = errorString\n    })\n}\n\n/**\n * Using the existing messages in the chat history, create a string that can be used to aid completion\n * @return {JSONObject} A transcript of the conversation up to this point\n */\nconst buildTranscript = () => {\n    let transcript = []\n    document.querySelectorAll('.openai_message').forEach((message, index) => {\n        if (index === document.querySelectorAll('.openai_message').length - 1) {\n            return\n        }\n\n        let user = userName\n        if (message.classList.contains('bot')) {\n            user = assistantName\n        }\n        transcript.push({\"user\": user, \"message\": message.innerText})\n    })\n\n    return transcript\n}\n\n/**\n * Check user token usage\n * @return {boolean}\n */\nconst checkUserTokenUsage = async function(blockId, usertokenvalidation) {\n    return new Promise((resolve, reject) => {\n        if (usertokenvalidation) {\n            require(['jquery','core/ajax','core/notification','core/str', 'core/pending'], function($,Ajax,Notification,str,Pending) {\n\n                var pendingPromise = new Pending('mod_maici/lib:init');\n\n                Ajax.call([{\n                    methodname: 'mod_maici_validate_user_tokens',\n                    args: {cmid: blockId}\n                }])[0].then(function (response) {\n                    console.log(response);\n                    if(response['usertokenvalidation'] === false){\n                        $(\"#maici_container\").addClass(\"overlay\");\n\n                        Notification.alert(str.get_string('chatwindowinfo','mod_maici'),\n                            str.get_string('outoftokens','mod_maici'),\n                            str.get_string('chatwindowbutton','mod_maici'));\n\n                        resolve(false);\n                    } else {\n                        resolve(true);\n                    }\n                }).always(pendingPromise.resolve)\n                    .catch((error) => {\n                        reject(error);\n                    });\n            });\n        } else {\n            resolve(true);\n        }\n    });\n}"],"names":["questionString","errorString","data","blockId","api_type","persistConvo","usertokenvalidation","chatData","localStorage","getItem","JSON","parse","fetch","M","cfg","wwwroot","method","body","stringify","threadId","then","response","json","message","addToChatLog","role","_iterator","catch","error","setItem","document","querySelector","addEventListener","e","which","target","value","_context","checkUserTokenUsage","createCompletion","input","_context2","clearHistory","require","str","get_strings","key","component","results","type","messageContainer","messageElem","createElement","classList","add","split","className","_iterator2","messageText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","history","buildTranscript","remove","placeholder","blur","removeChild","lastElementChild","ok","errorMessage","Object","keys","forEach","attr","Error","thread_id","console","log","focus","transcript","querySelectorAll","index","length","user","userName","contains","assistantName","push","innerText","Promise","resolve","reject","$","Ajax","Notification","Pending","pendingPromise","call","methodname","args","cmid","addClass","alert","get_string","always"],"mappings":"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"}